name: Deploy

concurrency: deploy-${{ fromJSON('["pastaporto", "production"]')[github.ref == 'refs/heads/main'] }}

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      services:
        description: 'Comma-separated list of services to deploy. Use "all" to deploy all.'
        default: "all"
        required: false

env:
  # ALL_SERVICES: '[
  #     { "name": "pycon-backend", "dir": "backend" },
  #     { "name": "association-backend", "dir": "association-backend" },
  #     { "name": "association-backend", "dir": "association-backend" },
  #     { "name": "gateway", "dir": "gateway" },
  #   ]'
  ALL_SERVICES: '[
      { "name": "gateway", "dir": "gateway" }
    ]'

jobs:
  services:
    runs-on: ubuntu-latest
    outputs:
      services-matrix: ${{ steps.init.outputs.matrix }}
    steps:
      - name: Prepare services to deploy
        id: services
        shell: python
        run: |
          import os
          import json

          with open(os.environ['GITHUB_EVENT_PATH']) as json_file:
            github_event = json.load(json_file)

          all_services = json.loads(os.environ['ALL_SERVICES'])
          allowed_services = [service['name'] for service in all_services]
          requested_services = github_event.get('input', {}).get('services', 'all')

          if requested_services == 'all':
            requested_services = allowed_services
          else:
            requested_services = requested_services.split(',')

          matrix = {
            "service": []
          }
          for requested_service in requested_services:
            if requested_service not in allowed_services:
              raise ValueError(f"Invalid service: {requested_service}")

            service_data = next(
              (service for service in all_services if service['name'] == requested_service),
            )
            matrix['service'].append(service_data)

          print("requested_services is", requested_services)
          print(f'echo "::set-output name=services-matrix::{json.dumps(json.dumps(matrix))}"')
  build-and-publish-services:
    needs: [services]
    uses: pythonitalia/pycon/.github/workflows/deploy.build-and-publish-services.yml@WEB-159-new-deployment-pipeline
    with:
      services: ${{fromJSON(needs.services.outputs.services-matrix)}}
    secrets:
      aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
